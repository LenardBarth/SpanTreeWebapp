### TODO ###
~~~~~~~~~~~~

* saving data
	X store edges & vrtcs in localStorage
	X to compute send data stored locally
	+ to save be logged in first
		- send lists from localstorage
		- process lists in BE
* redesign DB to store SpanningTree properly
	X just update edges, vrtcs in FE then send entire list (that way must not be logged in)
	X store stringified JSON of edges & vrtcs
* compute tree in backend
	X define route
	X integrate spanningTree ipynb
	X return string result




-> example of localStorage structure - same as BE
List of all SpanTrees
{
	1: {
		"vrtcs": [
			{"ID": 1, "name": "A"},
			{"ID": 2, "name": "B"},
			{"ID": 5, "name": "C"}
		],
		"edges": [
			{"From": "A", "To": "B", "Weight": 11},
			{"From": "B", "To": "C", "Weight": 5},
			{"From": "C", "To": "A", "Weight": 13}
		]
	},
	2: {
		"vrtcs": [
			...
		],
		"edges": [
			...
		]
	}
}

-> example of what BE returns on getUserTree
response.data = {
	1: {
		"vrtcs": [
			{"ID": 1, "name": "A"},
			{"ID": 2, "name": "B"},
			{"ID": 5, "name": "C"}
		],
		"edges": [
			{"From": "A", "To": "B", "Weight": 11},
			{"From": "B", "To": "C", "Weight": 5},
			{"From": "C", "To": "A", "Weight": 13}
		]
	},
	2: {
		"vrtcs": [
			...
		],
		"edges": [
			...
		]
	}
}